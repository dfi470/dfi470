mode: daemonset
replicaCount: 1
fullnameOverride: "otel-collector"

image:
  repository: gdaas-docker-reg.jfrog.teliacompany.io/otel-collector-ext
  tag: "v0.111.0"
  pullPolicy: Always

imagePullSecrets:
  - name: regcred-gdaas-docker-reg

command:
  name: "otelcol-ext"

presets:
  logsCollection:
    enabled: true
  kubeletMetrics:
    enabled: false

ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    protocol: TCP
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false
  metrics:
    enabled: true
    containerPort: 8888
    servicePort: 8888
    protocol: TCP

# Base collector configuration.
# Supports templating. To escape existing instances of {{ }}, use {{` <original content> `}}.
# For example, {{ REDACTED_EMAIL }} becomes {{` {{ REDACTED_EMAIL }} `}}.
config:
  extensions:
    health_check:
      endpoint: ${env:MY_POD_IP}:13133
    oauth2client:
      client_id: ""
      client_secret: ""
      token_url: ""
      timeout: 2s
    headers_setter:
      headers:
        - action: upsert
          key: X-Scope-OrgID
          from_context: tenant
  receivers:
    zipkin: null
    jaeger: null
    prometheus: null
    filelog:
      exclude:
      - /var/log/pods/otel-collector_otel-collector*_*/opentelemetry-collector/*.log
      include:
      - /var/log/pods/*/*/*.log
      include_file_name: false
      include_file_path: true
      operators:
      - id: container-parser
        max_log_size: 102400
        type: container
      retry_on_failure:
        enabled: true
      start_at: end

  processors:
    batch:
      timeout: 10s
    memory_limiter:
      check_interval: 1s
      limit_mib: 10000
      spike_limit_mib: 5000
    groupbyattrs/tenant:
       keys: [X-Scope-OrgID]
    context/tenant:
      actions:
      - action: upsert
        key: X-Scope-OrgID
        from_attribute: X-Scope-OrgID
    k8sattributes:
      passthrough: false
      extract:
        metadata:
         - k8s.namespace.name
         - k8s.deployment.name
         - k8s.statefulset.name
         - k8s.daemonset.name
         - k8s.cronjob.name
         - k8s.job.name
         - k8s.node.name
         - k8s.pod.name
         - k8s.pod.uid
        labels:
         - tag_name: X-Scope-OrgID
           key: oaas.teliacompany.com/tenant
           from: namespace
         - tag_name: X-Scope-OrgID
           key: oaas.teliacompany.com/tenant
           from: pod
        annotations:
         - tag_name: X-Scope-OrgID
           key: oaas.teliacompany.com/tenant
           from: namespace
         - tag_name: X-Scope-OrgID
           key: oaas.teliacompany.com/tenant
           from: pod          
      pod_association:
      - sources:
        - from: resource_attribute
          name: k8s.pod.ip
      - sources:
        - from: resource_attribute
          name: k8s.pod.uid
      - sources:
        - from: connection
    resource:
      attributes:
        - action: insert
          key: loki.resource.labels
          value: service.name, k8s.container.name, k8s.namespace.name, k8s.pod.name
  exporters:
    otlp/with_auth:
      endpoint: "https://otel-gateway-headless.otel-gateway.svc.cluster.local:4317"
      auth:
        authenticator: oauth2client
      tls:
        insecure: false
        insecure_skip_verify: true
      # headers:
      #   "X-Scope-OrgID": "grafana"
    debug:
      verbosity: detailed
  service:
    extensions:
      - health_check
      - oauth2client
      - headers_setter
    pipelines:
      logs:
        receivers:
          - filelog
        processors:
          - memory_limiter
          - k8sattributes
          - context/tenant          
          - resource
          - groupbyattrs/tenant
          - batch
        exporters:
          - otlp/with_auth
          - debug
      traces: null
      metrics: null

clusterRole:
  create: true
  rules:
  - apiGroups: [""]
    resources: ["pods", "namespaces", "nodes", "nodes/proxy", "services", "endpoints", "events"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apps"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["replicasets"]
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
